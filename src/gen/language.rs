// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `language.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
pub struct GetRequiredPluginsRequest {
    // message fields
    pub project: ::std::string::String,
    pub pwd: ::std::string::String,
    pub program: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetRequiredPluginsRequest {
    fn default() -> &'a GetRequiredPluginsRequest {
        <GetRequiredPluginsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetRequiredPluginsRequest {
    pub fn new() -> GetRequiredPluginsRequest {
        ::std::default::Default::default()
    }

    // string project = 1;


    pub fn get_project(&self) -> &str {
        &self.project
    }
    pub fn clear_project(&mut self) {
        self.project.clear();
    }

    // Param is passed by value, moved
    pub fn set_project(&mut self, v: ::std::string::String) {
        self.project = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project(&mut self) -> &mut ::std::string::String {
        &mut self.project
    }

    // Take field
    pub fn take_project(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project, ::std::string::String::new())
    }

    // string pwd = 2;


    pub fn get_pwd(&self) -> &str {
        &self.pwd
    }
    pub fn clear_pwd(&mut self) {
        self.pwd.clear();
    }

    // Param is passed by value, moved
    pub fn set_pwd(&mut self, v: ::std::string::String) {
        self.pwd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pwd(&mut self) -> &mut ::std::string::String {
        &mut self.pwd
    }

    // Take field
    pub fn take_pwd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pwd, ::std::string::String::new())
    }

    // string program = 3;


    pub fn get_program(&self) -> &str {
        &self.program
    }
    pub fn clear_program(&mut self) {
        self.program.clear();
    }

    // Param is passed by value, moved
    pub fn set_program(&mut self, v: ::std::string::String) {
        self.program = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_program(&mut self) -> &mut ::std::string::String {
        &mut self.program
    }

    // Take field
    pub fn take_program(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.program, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetRequiredPluginsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pwd)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.program)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.project.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.project);
        }
        if !self.pwd.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pwd);
        }
        if !self.program.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.program);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.project.is_empty() {
            os.write_string(1, &self.project)?;
        }
        if !self.pwd.is_empty() {
            os.write_string(2, &self.pwd)?;
        }
        if !self.program.is_empty() {
            os.write_string(3, &self.program)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetRequiredPluginsRequest {
        GetRequiredPluginsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "project",
                |m: &GetRequiredPluginsRequest| { &m.project },
                |m: &mut GetRequiredPluginsRequest| { &mut m.project },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pwd",
                |m: &GetRequiredPluginsRequest| { &m.pwd },
                |m: &mut GetRequiredPluginsRequest| { &mut m.pwd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "program",
                |m: &GetRequiredPluginsRequest| { &m.program },
                |m: &mut GetRequiredPluginsRequest| { &mut m.program },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetRequiredPluginsRequest>(
                "GetRequiredPluginsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetRequiredPluginsRequest {
        static instance: ::protobuf::rt::LazyV2<GetRequiredPluginsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetRequiredPluginsRequest::new)
    }
}

impl ::protobuf::Clear for GetRequiredPluginsRequest {
    fn clear(&mut self) {
        self.project.clear();
        self.pwd.clear();
        self.program.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetRequiredPluginsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetRequiredPluginsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetRequiredPluginsResponse {
    // message fields
    pub plugins: ::protobuf::RepeatedField<super::plugin::PluginDependency>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetRequiredPluginsResponse {
    fn default() -> &'a GetRequiredPluginsResponse {
        <GetRequiredPluginsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetRequiredPluginsResponse {
    pub fn new() -> GetRequiredPluginsResponse {
        ::std::default::Default::default()
    }

    // repeated .pulumirpc.PluginDependency plugins = 1;


    pub fn get_plugins(&self) -> &[super::plugin::PluginDependency] {
        &self.plugins
    }
    pub fn clear_plugins(&mut self) {
        self.plugins.clear();
    }

    // Param is passed by value, moved
    pub fn set_plugins(&mut self, v: ::protobuf::RepeatedField<super::plugin::PluginDependency>) {
        self.plugins = v;
    }

    // Mutable pointer to the field.
    pub fn mut_plugins(&mut self) -> &mut ::protobuf::RepeatedField<super::plugin::PluginDependency> {
        &mut self.plugins
    }

    // Take field
    pub fn take_plugins(&mut self) -> ::protobuf::RepeatedField<super::plugin::PluginDependency> {
        ::std::mem::replace(&mut self.plugins, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetRequiredPluginsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.plugins {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.plugins)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.plugins {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.plugins {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetRequiredPluginsResponse {
        GetRequiredPluginsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::plugin::PluginDependency>>(
                "plugins",
                |m: &GetRequiredPluginsResponse| { &m.plugins },
                |m: &mut GetRequiredPluginsResponse| { &mut m.plugins },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetRequiredPluginsResponse>(
                "GetRequiredPluginsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetRequiredPluginsResponse {
        static instance: ::protobuf::rt::LazyV2<GetRequiredPluginsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetRequiredPluginsResponse::new)
    }
}

impl ::protobuf::Clear for GetRequiredPluginsResponse {
    fn clear(&mut self) {
        self.plugins.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetRequiredPluginsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetRequiredPluginsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RunRequest {
    // message fields
    pub project: ::std::string::String,
    pub stack: ::std::string::String,
    pub pwd: ::std::string::String,
    pub program: ::std::string::String,
    pub args: ::protobuf::RepeatedField<::std::string::String>,
    pub config: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub dryRun: bool,
    pub parallel: i32,
    pub monitor_address: ::std::string::String,
    pub queryMode: bool,
    pub configSecretKeys: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RunRequest {
    fn default() -> &'a RunRequest {
        <RunRequest as ::protobuf::Message>::default_instance()
    }
}

impl RunRequest {
    pub fn new() -> RunRequest {
        ::std::default::Default::default()
    }

    // string project = 1;


    pub fn get_project(&self) -> &str {
        &self.project
    }
    pub fn clear_project(&mut self) {
        self.project.clear();
    }

    // Param is passed by value, moved
    pub fn set_project(&mut self, v: ::std::string::String) {
        self.project = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project(&mut self) -> &mut ::std::string::String {
        &mut self.project
    }

    // Take field
    pub fn take_project(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project, ::std::string::String::new())
    }

    // string stack = 2;


    pub fn get_stack(&self) -> &str {
        &self.stack
    }
    pub fn clear_stack(&mut self) {
        self.stack.clear();
    }

    // Param is passed by value, moved
    pub fn set_stack(&mut self, v: ::std::string::String) {
        self.stack = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stack(&mut self) -> &mut ::std::string::String {
        &mut self.stack
    }

    // Take field
    pub fn take_stack(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stack, ::std::string::String::new())
    }

    // string pwd = 3;


    pub fn get_pwd(&self) -> &str {
        &self.pwd
    }
    pub fn clear_pwd(&mut self) {
        self.pwd.clear();
    }

    // Param is passed by value, moved
    pub fn set_pwd(&mut self, v: ::std::string::String) {
        self.pwd = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pwd(&mut self) -> &mut ::std::string::String {
        &mut self.pwd
    }

    // Take field
    pub fn take_pwd(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pwd, ::std::string::String::new())
    }

    // string program = 4;


    pub fn get_program(&self) -> &str {
        &self.program
    }
    pub fn clear_program(&mut self) {
        self.program.clear();
    }

    // Param is passed by value, moved
    pub fn set_program(&mut self, v: ::std::string::String) {
        self.program = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_program(&mut self) -> &mut ::std::string::String {
        &mut self.program
    }

    // Take field
    pub fn take_program(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.program, ::std::string::String::new())
    }

    // repeated string args = 5;


    pub fn get_args(&self) -> &[::std::string::String] {
        &self.args
    }
    pub fn clear_args(&mut self) {
        self.args.clear();
    }

    // Param is passed by value, moved
    pub fn set_args(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.args = v;
    }

    // Mutable pointer to the field.
    pub fn mut_args(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.args
    }

    // Take field
    pub fn take_args(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.args, ::protobuf::RepeatedField::new())
    }

    // repeated .pulumirpc.RunRequest.ConfigEntry config = 6;


    pub fn get_config(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.config
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.config = v;
    }

    // Mutable pointer to the field.
    pub fn mut_config(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.config
    }

    // Take field
    pub fn take_config(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.config, ::std::collections::HashMap::new())
    }

    // bool dryRun = 7;


    pub fn get_dryRun(&self) -> bool {
        self.dryRun
    }
    pub fn clear_dryRun(&mut self) {
        self.dryRun = false;
    }

    // Param is passed by value, moved
    pub fn set_dryRun(&mut self, v: bool) {
        self.dryRun = v;
    }

    // int32 parallel = 8;


    pub fn get_parallel(&self) -> i32 {
        self.parallel
    }
    pub fn clear_parallel(&mut self) {
        self.parallel = 0;
    }

    // Param is passed by value, moved
    pub fn set_parallel(&mut self, v: i32) {
        self.parallel = v;
    }

    // string monitor_address = 9;


    pub fn get_monitor_address(&self) -> &str {
        &self.monitor_address
    }
    pub fn clear_monitor_address(&mut self) {
        self.monitor_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_monitor_address(&mut self, v: ::std::string::String) {
        self.monitor_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_monitor_address(&mut self) -> &mut ::std::string::String {
        &mut self.monitor_address
    }

    // Take field
    pub fn take_monitor_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.monitor_address, ::std::string::String::new())
    }

    // bool queryMode = 10;


    pub fn get_queryMode(&self) -> bool {
        self.queryMode
    }
    pub fn clear_queryMode(&mut self) {
        self.queryMode = false;
    }

    // Param is passed by value, moved
    pub fn set_queryMode(&mut self, v: bool) {
        self.queryMode = v;
    }

    // repeated string configSecretKeys = 11;


    pub fn get_configSecretKeys(&self) -> &[::std::string::String] {
        &self.configSecretKeys
    }
    pub fn clear_configSecretKeys(&mut self) {
        self.configSecretKeys.clear();
    }

    // Param is passed by value, moved
    pub fn set_configSecretKeys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.configSecretKeys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_configSecretKeys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.configSecretKeys
    }

    // Take field
    pub fn take_configSecretKeys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.configSecretKeys, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RunRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stack)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pwd)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.program)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.args)?;
                },
                6 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.config)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.dryRun = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.parallel = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.monitor_address)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.queryMode = tmp;
                },
                11 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.configSecretKeys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.project.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.project);
        }
        if !self.stack.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.stack);
        }
        if !self.pwd.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.pwd);
        }
        if !self.program.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.program);
        }
        for value in &self.args {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.config);
        if self.dryRun != false {
            my_size += 2;
        }
        if self.parallel != 0 {
            my_size += ::protobuf::rt::value_size(8, self.parallel, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.monitor_address.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.monitor_address);
        }
        if self.queryMode != false {
            my_size += 2;
        }
        for value in &self.configSecretKeys {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.project.is_empty() {
            os.write_string(1, &self.project)?;
        }
        if !self.stack.is_empty() {
            os.write_string(2, &self.stack)?;
        }
        if !self.pwd.is_empty() {
            os.write_string(3, &self.pwd)?;
        }
        if !self.program.is_empty() {
            os.write_string(4, &self.program)?;
        }
        for v in &self.args {
            os.write_string(5, &v)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.config, os)?;
        if self.dryRun != false {
            os.write_bool(7, self.dryRun)?;
        }
        if self.parallel != 0 {
            os.write_int32(8, self.parallel)?;
        }
        if !self.monitor_address.is_empty() {
            os.write_string(9, &self.monitor_address)?;
        }
        if self.queryMode != false {
            os.write_bool(10, self.queryMode)?;
        }
        for v in &self.configSecretKeys {
            os.write_string(11, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RunRequest {
        RunRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "project",
                |m: &RunRequest| { &m.project },
                |m: &mut RunRequest| { &mut m.project },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stack",
                |m: &RunRequest| { &m.stack },
                |m: &mut RunRequest| { &mut m.stack },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pwd",
                |m: &RunRequest| { &m.pwd },
                |m: &mut RunRequest| { &mut m.pwd },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "program",
                |m: &RunRequest| { &m.program },
                |m: &mut RunRequest| { &mut m.program },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "args",
                |m: &RunRequest| { &m.args },
                |m: &mut RunRequest| { &mut m.args },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "config",
                |m: &RunRequest| { &m.config },
                |m: &mut RunRequest| { &mut m.config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "dryRun",
                |m: &RunRequest| { &m.dryRun },
                |m: &mut RunRequest| { &mut m.dryRun },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "parallel",
                |m: &RunRequest| { &m.parallel },
                |m: &mut RunRequest| { &mut m.parallel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "monitor_address",
                |m: &RunRequest| { &m.monitor_address },
                |m: &mut RunRequest| { &mut m.monitor_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "queryMode",
                |m: &RunRequest| { &m.queryMode },
                |m: &mut RunRequest| { &mut m.queryMode },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "configSecretKeys",
                |m: &RunRequest| { &m.configSecretKeys },
                |m: &mut RunRequest| { &mut m.configSecretKeys },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RunRequest>(
                "RunRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RunRequest {
        static instance: ::protobuf::rt::LazyV2<RunRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RunRequest::new)
    }
}

impl ::protobuf::Clear for RunRequest {
    fn clear(&mut self) {
        self.project.clear();
        self.stack.clear();
        self.pwd.clear();
        self.program.clear();
        self.args.clear();
        self.config.clear();
        self.dryRun = false;
        self.parallel = 0;
        self.monitor_address.clear();
        self.queryMode = false;
        self.configSecretKeys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RunResponse {
    // message fields
    pub error: ::std::string::String,
    pub bail: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RunResponse {
    fn default() -> &'a RunResponse {
        <RunResponse as ::protobuf::Message>::default_instance()
    }
}

impl RunResponse {
    pub fn new() -> RunResponse {
        ::std::default::Default::default()
    }

    // string error = 1;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }

    // bool bail = 2;


    pub fn get_bail(&self) -> bool {
        self.bail
    }
    pub fn clear_bail(&mut self) {
        self.bail = false;
    }

    // Param is passed by value, moved
    pub fn set_bail(&mut self, v: bool) {
        self.bail = v;
    }
}

impl ::protobuf::Message for RunResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.bail = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.error);
        }
        if self.bail != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.error.is_empty() {
            os.write_string(1, &self.error)?;
        }
        if self.bail != false {
            os.write_bool(2, self.bail)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RunResponse {
        RunResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &RunResponse| { &m.error },
                |m: &mut RunResponse| { &mut m.error },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "bail",
                |m: &RunResponse| { &m.bail },
                |m: &mut RunResponse| { &mut m.bail },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RunResponse>(
                "RunResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RunResponse {
        static instance: ::protobuf::rt::LazyV2<RunResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RunResponse::new)
    }
}

impl ::protobuf::Clear for RunResponse {
    fn clear(&mut self) {
        self.error.clear();
        self.bail = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0elanguage.proto\x12\tpulumirpc\x1a\x0cplugin.proto\x1a\x1bgoogle/pr\
    otobuf/empty.proto\"a\n\x19GetRequiredPluginsRequest\x12\x18\n\x07projec\
    t\x18\x01\x20\x01(\tR\x07project\x12\x10\n\x03pwd\x18\x02\x20\x01(\tR\
    \x03pwd\x12\x18\n\x07program\x18\x03\x20\x01(\tR\x07program\"S\n\x1aGetR\
    equiredPluginsResponse\x125\n\x07plugins\x18\x01\x20\x03(\x0b2\x1b.pulum\
    irpc.PluginDependencyR\x07plugins\"\x99\x03\n\nRunRequest\x12\x18\n\x07p\
    roject\x18\x01\x20\x01(\tR\x07project\x12\x14\n\x05stack\x18\x02\x20\x01\
    (\tR\x05stack\x12\x10\n\x03pwd\x18\x03\x20\x01(\tR\x03pwd\x12\x18\n\x07p\
    rogram\x18\x04\x20\x01(\tR\x07program\x12\x12\n\x04args\x18\x05\x20\x03(\
    \tR\x04args\x129\n\x06config\x18\x06\x20\x03(\x0b2!.pulumirpc.RunRequest\
    .ConfigEntryR\x06config\x12\x16\n\x06dryRun\x18\x07\x20\x01(\x08R\x06dry\
    Run\x12\x1a\n\x08parallel\x18\x08\x20\x01(\x05R\x08parallel\x12'\n\x0fmo\
    nitor_address\x18\t\x20\x01(\tR\x0emonitorAddress\x12\x1c\n\tqueryMode\
    \x18\n\x20\x01(\x08R\tqueryMode\x12*\n\x10configSecretKeys\x18\x0b\x20\
    \x03(\tR\x10configSecretKeys\x1a9\n\x0bConfigEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\
    \x028\x01\"7\n\x0bRunResponse\x12\x14\n\x05error\x18\x01\x20\x01(\tR\x05\
    error\x12\x12\n\x04bail\x18\x02\x20\x01(\x08R\x04bail2\xf0\x01\n\x0fLang\
    uageRuntime\x12c\n\x12GetRequiredPlugins\x12$.pulumirpc.GetRequiredPlugi\
    nsRequest\x1a%.pulumirpc.GetRequiredPluginsResponse\"\0\x126\n\x03Run\
    \x12\x15.pulumirpc.RunRequest\x1a\x16.pulumirpc.RunResponse\"\0\x12@\n\r\
    GetPluginInfo\x12\x16.google.protobuf.Empty\x1a\x15.pulumirpc.PluginInfo\
    \"\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
